AWSTemplateFormatVersion: 2010-09-09

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
  CidrAccess:
    Description: CidrIp range (put /32 for single ip) for SSH and MySQL access.
    Type: String

Resources:
  ECRRepository:
    Type: AWS::ECR::Repository

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - InternetGateway
      - GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs ]
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true

  PublicSubset1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubset2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # We need another subnet in another AZ for the RDS instance
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs ]
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true

  ECSCluster:
    Type: AWS::ECS::Cluster

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref VPC

  EcsSecurityGroupHttpInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  EcsSecurityGroupHttpsInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0

  EcsSecurityGroupSshInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref CidrAccess

  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - '-'
        - - EcsLogGroup
          - !Ref AWS::StackName
      RetentionInDays: 14

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: EC2RolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecs:CreateCluster
                  - ecs:DeregisterContainerInstance
                  - ecs:DiscoverPollEndpoint
                  - ecs:Poll
                  - ecs:RegisterContainerInstance
                  - ecs:StartTelemetrySession
                  - ecs:Submit*
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0360083982fcb66ad
      SecurityGroupIds:
        - !GetAtt EcsSecurityGroup.GroupId
      InstanceType: t3.micro
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnet1
      UserData: !Base64 
          'Fn::Join':
            - ''
            - - |
                #!/bin/bash -xe
              - echo ECS_CLUSTER=
              - !Ref ECSCluster
              - |2
                >> /etc/ecs/ecs.config
              - |
                yum update -y
                yum install -y aws-cfn-bootstrap mysql awscli jq
              - '/opt/aws/bin/cfn-signal -e $? '
              - '         --stack '
              - !Ref 'AWS::StackName'
              - '         --resource ECSAutoScalingGroup '
              - '         --region '
              - !Ref 'AWS::Region'
              - |+

              - !Sub 
                - |
                  ADMIN_SECRET=$(aws secretsmanager get-secret-value \
                                                    --region ${AWS::Region} \
                                                    --secret-id ${RdsAdminCreds} \ 
                                                    --query SecretString \
                                                    --output text)

                  APP_SECRET=$(aws secretsmanager get-secret-value \
                                                    --region ${AWS::Region} \ 
                                                    --secret-id ${RmdAppCreds} \ 
                                                    --query SecretString \
                                                    --output text)

                  mysql --host ${RdsEndpoint} \
                        --user $(echo $ADMIN_SECRET | jq -r .username) \
                        --password $(echo $ADMIN_SECRET | jq -r .password) \ 
                        --execute "CREATE DATABASE rmd_db;" \
                                  "CREATE USER '"$(echo $APP_SECRET | jq -r .username)'@'%' IDENTIFIED BY '"$(echo $APP_SECRET | jq -r .password)"';" \
                                  "GRANT ALL PRIVILEGES ON rmd_db.* TO '"$(echo $APP_SECRET | jq -r .username)"'@'%';" \
                                  "FLUSH PRIVILEGES;"
                - RdsEndpoint: !GetAtt RDSDatabase.Endpoint.Address
              - |+

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: rmd-backend
          Image: !Join [ ":", [ !GetAtt ECRRepository.RepositoryUri, "latest" ] ]
          Cpu: 1024
          Memory: 512
          Essential: true
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudwatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
  
  # TODO This service can only be uncommented once the ECRRepository has an image
  # Service:
  #   Type: AWS::ECS::Service
  #   Properties:
  #     Cluster: !Ref ECSCluster
  #     DesiredCount: 1
  #     TaskDefinition: !Ref TaskDefinition

  RdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MySQL Security Group
      VpcId: !Ref VPC
  
  EcsToRdsSecurityGroupInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RdsSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref EcsSecurityGroup

  HomeToRdsSecurityGroupInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Description: Connect to RDS database from whitelisted network
    Properties:
      GroupId: !Ref RdsSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      CidrIp: !Ref CidrAccess

  RdsSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup 
    Properties:
      DBSubnetGroupDescription: MySQL Subnet Groups
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
  
  RdsAdminCreds:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        SecretStringTemplate: '{"username": "rmd_mysql_admin"}'
        GenerateStringKey: password
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  RmdAppCreds:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        SecretStringTemplate: '{"username": "rmd_mysql_app"}'
        GenerateStringKey: password
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  RDSDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t4g.micro # Cheaper than t3.micro, but also on free tier
      DBSubnetGroupName: !Ref RdsSubnetGroup
      Engine: MySQL
      EngineVersion: 8.0
      MultiAZ: False
      PubliclyAccessible: true # Accessible from whitelisted networks
      MasterUsername: !Join [ '', [ '{{resolve:secretsmanager:', !Ref RdsAdminCreds, ':SecretString:username}}' ] ]
      MasterUserPassword: !Join [ '', [ '{{resolve:secretsmanager:', !Ref RdsAdminCreds, ':SecretString:password}}' ] ]
      VPCSecurityGroups:
        - !Ref RdsSecurityGroup
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
